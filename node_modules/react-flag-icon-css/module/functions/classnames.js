function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import classnames from 'classnames';

import classNameToStyleName from '../functions/classNameToStyleName';
import { baseThemeStyleName, flagIconClassesPrefix, flagIconClassesPrefixName } from './constants';

export var makeClassesObject = function makeClassesObject(props, options) {
  var _ref;

  var code = props.code,
      _props$flip = props.flip,
      flip = _props$flip === undefined ? '' : _props$flip,
      _props$size = props.size,
      size = _props$size === undefined ? '' : _props$size,
      _props$squared = props.squared,
      squared = _props$squared === undefined ? false : _props$squared,
      rotate = props.rotate,
      className = props.className,
      styleName = props.styleName;
  var themeStyles = options.themeStyles,
      useCssModules = options.useCssModules;


  return _ref = {}, _defineProperty(_ref, flagIconClassesPrefixName, true), _defineProperty(_ref, flagIconClassesPrefix + 'squared', squared), _defineProperty(_ref, '' + flagIconClassesPrefix + size, size), _defineProperty(_ref, '' + flagIconClassesPrefix + code, code), _defineProperty(_ref, flagIconClassesPrefix + 'flip-' + flip, flip), _defineProperty(_ref, flagIconClassesPrefix + 'rotate-' + (rotate || ''), rotate), _defineProperty(_ref, baseThemeStyleName, useCssModules && themeStyles && themeStyles[baseThemeStyleName]), _defineProperty(_ref, styleName || '', useCssModules && themeStyles && styleName && themeStyles[styleName]), _defineProperty(_ref, className || '', className), _ref;
};

export default (function (props, options, styles) {
  var useCssModules = options.useCssModules;


  var classesObject = makeClassesObject(props, options);
  var strClasses = classnames(classesObject);

  if (useCssModules) {
    var aClasses = strClasses.split(' ');
    var nClasses = aClasses.length;

    strClasses = aClasses.map(function (c, i) {
      if (props.className && i === nClasses - 1) return c;

      return classNameToStyleName(c, styles || {});
    }).join(' ');
  }
  return strClasses;
});