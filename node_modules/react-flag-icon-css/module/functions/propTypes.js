var _this = this;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var fnThemeStylesValidator = function fnThemeStylesValidator(propsObject, propsValues, propName, componentName) {
  var useCssModules = propsValues.useCssModules,
      customCodes = propsValues.customCodes;

  if (!useCssModules) return;

  if (customCodes) {
    var themeStyles = propsValues.themeStyles;


    if (themeStyles) {
      var themeStylesClassNames = Object.keys(themeStyles);
      var result = Object.keys(customCodes).filter(function (customCode) {
        return !themeStylesClassNames.includes('flag-icon-' + customCode);
      });

      if (result.length > 0) {
        return new Error('Invalid prop(s) `themeStyles` supplied to `' + componentName + '`, expected `.flag-icon-[' + result.join('/') + ']`.');
      }
    } else {
      return new Error('Missing required prop(s) `themeStyles` supplied to `' + componentName + '`.');
    }
  }
};

export var AddThemeStylesValidator = function AddThemeStylesValidator(obj) {
  var validatorKeyName = '__themeStyles__';
  if (Object.prototype.hasOwnProperty.call(obj, validatorKeyName)) {
    return obj;
  }

  return _extends({}, obj, _defineProperty({}, validatorKeyName, fnThemeStylesValidator.bind(_this, obj)));
};

var fnExactValidator = function fnExactValidator(propsObject, propsValues, propName, componentName) {
  var passedPropNames = Object.keys(propsValues);
  var extra = passedPropNames.filter(function (prop) {
    return !Object.prototype.hasOwnProperty.call(propsObject, prop);
  });

  if (extra.length > 0) {
    return new Error('Invalid prop(s) ' + JSON.stringify(extra) + ' supplied to `' + componentName + '`, expected one of [' + passedPropNames.join(',') + '].');
  }
};

export var AddExactValidator = function AddExactValidator(obj) {
  var validatorKeyName = '__exact__';
  if (Object.prototype.hasOwnProperty.call(obj, validatorKeyName)) {
    return obj;
  }

  return _extends({}, obj, _defineProperty({}, validatorKeyName, fnExactValidator.bind(_this, obj)));
};